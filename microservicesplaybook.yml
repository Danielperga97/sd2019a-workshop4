- name: Configuracion de microservicios 
  hosts: microservices
  become: yes
  become_user: root
  become_method: sudo
  tasks:
  - name: Install unzip and curl 
    yum: name={{ item }} update_cache=true state=installed
    with_items:
    - unzip 
    - curl 
    tags: packages
  - name: instalar epel-release
    yum:
      name: epel-release
      state: present
  - name: instalar pip
    yum:
      name: python-pip
      state: present
  - name: verificar que la configurarcion no exista
    stat:
      path: /etc/consul.d
    register: directory_exists
  - name: descargar consul 
    unarchive:
      src: https://releases.hashicorp.com/consul/1.1.0/consul_1.1.0_linux_amd64.zip
      dest: /tmp
      remote_src: yes
    when: not directory_exists.stat.exists
  - name: create folder and move consul 
    command: "{{ item }}"
    with_items:
    - mv /tmp/consul /usr/bin
    - mkdir /etc/consul.d 
    - mkdir -p /etc/consul/data
    - adduser consul
    - adduser microservices
    - chown -R consul:consul /etc/consul
    - chown -R consul:consul /etc/consul.d
    sudo: yes
    when: not directory_exists.stat.exists

  - name:  add consul to wheel
    command: usermod -aG wheel consul
  - name:  add mocroservices to wheel
    command: usermod -aG wheel microservices 

  - firewalld:
      port: 8301/tcp
      permanent: true
      state: enabled
  - firewalld:
      port: 8080/tcp
      permanent: true
      state: enabled
  - name: reiniciar el firewall
    service:
      name: firewalld
      state: restarted
  - pip:
      name: flask 

  - name: allow sudoers consul
    lineinfile:
      path: /etc/sudoers
      line: "consul ALL=(ALL:ALL) NOPASSWD: ALL"

  - name: allow sudoers microservices 
    lineinfile:
      path: /etc/sudoers
      line: "microservices ALL=(ALL:ALL) NOPASSWD: ALL"


  - name: verificar que el script A no exista 
    stat:
      path: /home/microservices/microservice_a.py
    register: scriptA_exists

  - name: verificar que el script B  no exista
    stat:
      path: /home/microservices/microservice_b.py
    register: scriptB_exists


  - name: download microservice A file 
    get_url:
      url: https://raw.githubusercontent.com/ICESI/ds-discovery-service/master/sources/microservice_a.py 
      dest: /home/microservices/microservice_a.py
    become: yes
    become_user: microservices
    become_method: sudo
    when: not scriptA_exists.stat.exists and inventory_hostname in groups['microserviceA'] 

  - name: run microservice A 
    command: python /home/microservices/microservice_a.py 
    become: yes
    become_user: microservices 
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceA']

  - name: download microservice B file
    get_url:
      url: https://raw.githubusercontent.com/ICESI/ds-discovery-service/master/sources/microservice_b.py
      dest: /home/microservices/microservice_b.py
    become: yes
    become_user: microservices
    become_method: sudo
    when: not scriptB_exists.stat.exists and inventory_hostname in groups['microserviceB']

  - name: run microservice B 
    command: python /home/microservices/microservice_b.py
    become: yes
    become_user: microservices
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceB']

  - name: create healthcheck A 
    command:  "echo '{\"service\": {\"name\": \"microservice-a\", \"tags\": [\"flask\"], \"port\": 8080, \"check\": {\"script\": \"curl localhost:8080/health >/dev/null 2>&1\", \"interval\": \"10s\"}}}' >/etc/consul.d/microservice-a.json"
    become: yes
    become_user: consul
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceA']

  - name: create healthcheck B
    command:  "echo '{\"service\": {\"name\": \"microservice-b\", \"tags\": [\"flask\"], \"port\": 8080, \"check\": {\"script\": \"curl localhost:8080/health >/dev/null 2>&1\", \"interval\": \"10s\"}}}' >/etc/consul.d/microservice-b.json"
    become: yes
    become_user: consul
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceB']



  - name: run consul A
    command: consul agent -data-dir=/etc/consul/data -node=agent-one -bind=192.168.56.103 -enable-script-checks=true -config-dir=/etc/consul.d
    become: yes
    become_user: consul
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceA']

  - name: run consul B 
    command: consul agent -data-dir=/etc/consul/data -node=agent-two -bind=192.168.56.104 -enable-script-checks=true -config-dir=/etc/consul.d
    become: yes
    become_user: consul
    become_method: sudo
    async: 10000 
    poll: 0
    when: inventory_hostname in groups['microserviceB']


  - name: join discovery service  
    command: consul join 192.168.56.102 
    become: yes
    become_user: microservices
    become_method: sudo
    async: 10000 
    poll: 0


